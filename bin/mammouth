#!/usr/bin/env node
var program = require('commander'),
	fs = require('fs'),
	mammouth = require('../extras/mammouth-nodejs.js'),
	patch = require('path');
program
	.version('0.2.3')
	.usage('[options] <file ...>')
	.option('-c, --compile', '')
	.option('-o, --output [DIR]', 'Write out all compiled PHP files into the specified directory. Use in conjunction with --compile', './');
program.parse(process.argv);
///////////////////////////////////////
var copyFileSync = function(srcFile, destFile) {
	var BUF_LENGTH, buff, bytesRead, fdr, fdw, pos;
	BUF_LENGTH = 64 * 1024;
	buff = new Buffer(BUF_LENGTH);
	fdr = fs.openSync(srcFile, 'r');
	fdw = fs.openSync(destFile, 'w');
	bytesRead = 1;
	pos = 0;
	while (bytesRead > 0) {
		bytesRead = fs.readSync(fdr, buff, 0, BUF_LENGTH, pos);
		fs.writeSync(fdw, buff, 0, bytesRead);
		pos += bytesRead;
	}
	fs.closeSync(fdr);
	return fs.closeSync(fdw);
};
var sharpr = function(path) {
	var arr = path.split("\\");
	pathr = "";
	for (var i = 0; i < arr.length; i++) {
		if(i==0) {
			pathr = pathr + arr[i];
		} else {
			pathr = pathr + "/" + arr[i];
		}
	};
	return pathr;
};

function bld(path, to) {
	var stats = fs.lstatSync(path);
	if(stats.isFile()){
		var ext = patch.extname(path);
		if(ext == '.mmt' || ext == '.mammouth') {
			var r = '';
			var arr = path.split("/");
			fs.readFile(path, 'utf8', function (err, data) {
				try {
					r = mammouth.compile(data);
					fs.writeFile(to + '/' + arr[arr.length-1].split(".")[0] + '.php', r, function () {
					});
				} catch(err) {
					console.log(err);
				}
			});
		} else {
			var arr = path.split("/");
			copyFileSync(path, to + '/' + arr[arr.length-1]);
		}
	} else if(stats.isDirectory()) {
		var arr = path.split("/");
		fs.mkdirSync(to + "/" + arr[arr.length-1]);
		var ctn = fs.readdirSync(path);
		for (var i = 0; i < ctn.length; i++) {
			bld(path + "/" + ctn[i], to + "/" + arr[arr.length-1]);
		};
	}
}
function buildFile(path, output) {
	if(fs.existsSync(output)==false) {
		fs.mkdirSync(output);
	}
	bld(path, output);
}
function buildFolder(path, output) {
	if(fs.existsSync(output)==false) {
		fs.mkdirSync(output);
	}
	var ctn = fs.readdirSync(path);
	for (var i = 0; i < ctn.length; i++) {
		bld(path + "/" + ctn[i], output);
	}
};

/////////////////////////////////
if (program.compile) {
	for (var i = 0; i < program.args.length; i++) {
		path = sharpr(program.args[i]);
		stats = fs.lstatSync(path);
		if(stats.isFile()){
			buildFile(path, program.output)
		} else if(stats.isDirectory()) {
			buildFolder(path, program.output)
		}
	};
}